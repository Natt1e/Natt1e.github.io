<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>snort+barnyard2+base_Ubuntu18.04</title>
      <link href="/2023/05/09/ubuntu-snort-barnyard2-base/"/>
      <url>/2023/05/09/ubuntu-snort-barnyard2-base/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Ubuntu18-04配置snort-barnyard2-base入侵检测系统"><a href="#基于Ubuntu18-04配置snort-barnyard2-base入侵检测系统" class="headerlink" title="基于Ubuntu18.04配置snort+barnyard2+base入侵检测系统"></a>基于Ubuntu18.04配置snort+barnyard2+base入侵检测系统</h1><p>我们一共需要: Apache , PHP,  MySQL, Snort, Barnyard2, BASE.</p><p>Ubuntu版本为18.04 LTS.</p><h2 id="安装Apache2-Web服务器"><a href="#安装Apache2-Web服务器" class="headerlink" title="安装Apache2 Web服务器"></a>安装Apache2 Web服务器</h2><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install apache2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h2><p>因为环境比较古早，需要PHP5及以下的版本。但Ubuntu18.04自带了PHP7，所以需要新装一个PHP5，并且切换至PHP5</p><p>安装PHP5：</p><pre class="line-numbers language-none"><code class="language-none">sudo add-apt-repository ppa:ondrej&#x2F;phpsudo apt-get updatesudo apt-get install php5.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将版本切换至5：</p><ol><li><strong>先禁用PHP 7，可以用<code>php -v</code>先查看当前的php版本。</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">sudo a2dismod php7.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出：<code>Module php7.4 already disabled</code></p><p>如果提示没有mod就先安装一个：<code>sudo apt-get install libapache2-mod-php7.4</code></p><ol start="2"><li><strong>启用PHP5</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">sudo a2enmod php5.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到最后一行输出<code>Module php5.6 already enabled</code>即为成功，除此之外应该还会有一些其他的信息。</p><ol start="3"><li><strong>重启apache</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">sudo service apache2 restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><strong>查看当前PHP版本</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">php -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时应该成功切换至PHP5，如果未切换成功，则等待几分钟，再进行查看。</p><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><p>直接进行安装即可</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install mysql-serversudo apt-get install mysql-client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装完以上之后，还需安装一些其他依赖项</p><p>apache2 php5模块</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install libapache2-mod-php5.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>php5 mysql模块</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install php5.6-mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装snort"><a href="#安装snort" class="headerlink" title="安装snort"></a>安装snort</h2><p>snort是一个入侵检测系统，在1998年用C语言开发，已经是非常古老的产物了。</p><ol><li><strong>先查看一下本机的接口</strong>：（之后会用到）</li></ol><pre class="line-numbers language-none"><code class="language-none">ifconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一般来讲都会有ens33和lo两个接口。如果提示没有net-tools就安装一个。</p><p><img src="/2023/05/09/ubuntu-snort-barnyard2-base/ifconfig.png"></p><ol start="2"><li><strong>安装snort</strong>，直接安装即可</li></ol><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install snort<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在安装过程中，可能会弹出窗口让选择Snort监听的接口，默认为eth0，但可能本机根本就没有eth0这个接口。此时填<code>ifconfig</code>查询出来的接口即可，如ens33.</p><ol start="3"><li><strong>查询Snort版本</strong>，观察是否安装成功</li></ol><pre class="line-numbers language-none"><code class="language-none">snort -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/05/09/ubuntu-snort-barnyard2-base/snort-v.png"></p><ol start="4"><li><strong>编辑配置文件</strong></li></ol><p>snort的配置文件在<code>/etc/snort/snort.conf</code></p><pre class="line-numbers language-none"><code class="language-none">sudo vim &#x2F;etc&#x2F;snort&#x2F;snort.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改内容如下(若内容一样则无需修改)：</p><p>（vim跳转至xx行，可直接:xxx回车）</p><p>115行左右：</p><pre class="line-numbers language-none"><code class="language-none">var RULE_PATH &#x2F;etc&#x2F;snort&#x2F;rulesvar SO_RULE_PATH &#x2F;etc&#x2F;snort&#x2F;so_rulesvar PREPROC_RULE_PATH &#x2F;etc&#x2F;snort&#x2F;preproc_rules<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>目的为指定规则文件存放的路径，一般不用修改。</p><p>536行左右：</p><pre class="line-numbers language-none"><code class="language-none">output unified2: filename snort.log, limit 128, mpls_event_types, vlan_event_types<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>目的为配置日志输出选项。</p><p><code>output unified2</code>: 设置日志输出格式为“unified2”</p><p><code>filename snort.log</code>: 将日志写入名为“snort.log”的文件</p><p><code>limit 128</code>: 设置日志文件的最大大小为128MB</p><p><code>mpls_event_types</code>: 启用对MPLS（多协议标签交换）事件的记录</p><p><code>vlan_event_types</code>: 启用对VLAN（虚拟局域网）事件的记录</p><p>**若显示该文件为只读文件，可强制修改，命令为<code>:w !sudo tee %</code>**，该指令以后也会用到。</p><h2 id="测试snort"><a href="#测试snort" class="headerlink" title="测试snort"></a>测试snort</h2><p>接下来，我们来测试一下snort，体会一下它的功能：</p><ol><li><strong>启动snort</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">sudo service snort restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><strong>修改规则</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">sudo vim &#x2F;etc&#x2F;snort&#x2F;rules&#x2F;local.rules &#x2F;&#x2F;这个是不是似曾相识？这是存放自定义规则的文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>向其中加入：</p><pre class="line-numbers language-none"><code class="language-none">alert icmp any any -&gt; $HOME_NET any (msg:&quot;ICMP Test NOW!!!&quot;; classtype:not-suspicious; sid:1000001; rev:1;)alert tcp any any -&gt; $HOME_NET 80 (msg:&quot;HTTP Test NOW!!!&quot;; classtype:not-suspicious; sid:1000002;  rev:1;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两条规则的含义是无论什么发往本机的ICMP和HTTP报文都会发出警告。</p><ol start="3"><li><strong>加入规则</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">sudo vim &#x2F;etc&#x2F;snort&#x2F;snort.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在大概573行：将除了local.rules之外的规则文件都去掉，即那些include，目的是为了方便测试。</p><p>最终是这样：</p><pre class="line-numbers language-none"><code class="language-none"># site specific rulesinclude $RULE_PATH&#x2F;local.rules<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li><strong>启动测试</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">sudo snort -T -c &#x2F;etc&#x2F;snort&#x2F;snort.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果看到输出是这样的：</p><pre class="line-numbers language-none"><code class="language-none">......Snort successfully validated the configuration!Snort exiting<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/05/09/ubuntu-snort-barnyard2-base/snort-test-2.png"></p><p>并且还能在一堆信息里找到：</p><pre class="line-numbers language-none"><code class="language-none">+++++++++++++++++++++++++++++++++++++++++++++++++++Initializing rule chains...1 Snort rules read    1 detection rules    0 decoder rules    0 preprocessor rules1 Option Chains linked into 1 Chain Headers0 Dynamic rules+++++++++++++++++++++++++++++++++++++++++++++++++++ +-------------------[Rule Port Counts]---------------------------------------|             tcp     udp    icmp      ip|     src       0       0       0       0|     dst       0       0       0       0|     any       0       0       1       0|      nc       0       0       1       0|     s+d       0       0       0       0+----------------------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/05/09/ubuntu-snort-barnyard2-base/snort-test-1.png"></p><p>说明成功辣！</p><pre class="line-numbers language-none"><code class="language-none">sudo snort -A console -q -u snort -g snort -c &#x2F;etc&#x2F;snort&#x2F;snort.conf -i ens33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里需要修改一下接口，我的是ens33</p><p>之后需要ping一下ubuntu，可以本机另开一个terminal（如果这样测试ens33要改为lo，因为lo是本地环回接口）：</p><pre class="line-numbers language-none"><code class="language-none">ping localhost<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果ubuntu是虚拟机，还可以用主机ping，虚拟机的ip用<code>ifconfig</code>查。</p><p>如果看到这样的输出：</p><p><img src="/2023/05/09/ubuntu-snort-barnyard2-base/snort-test-3.png"></p><p>那说明成功了，真是太好了</p><h2 id="配置Mysql"><a href="#配置Mysql" class="headerlink" title="配置Mysql"></a>配置Mysql</h2><p>我们配置Mysql的目的是创建一个snort用户，和两个数据库snort和archive，以便信息可以存储到数据库中。</p><ol><li><strong>先尝试连接数据库</strong>：</li></ol><pre class="line-numbers language-none"><code class="language-none">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-u root</code> ： 用root身份</p><p><code>-p</code> ：需要密码</p><p><strong>提示输入密码，直接按回车，如果报错，则进行下面的环节，如果不报错可跳过2-3步。</strong></p><ol start="2"><li><strong>设置允许无密码登录，重启mysql</strong></li></ol><p>修改文件：</p><pre class="line-numbers language-none"><code class="language-none">sudo vim &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>在[mysqld]中添加skip-grant-tables</strong>,<strong>直接添加即可</strong></p><p>重启mysql：</p><pre class="line-numbers language-none"><code class="language-none">service mysql restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再连接mysql：</p><pre class="line-numbers language-none"><code class="language-none">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时直接按回车便可登录。</p><p><img src="/2023/05/09/ubuntu-snort-barnyard2-base/mysql.png"></p><ol start="3"><li><strong>设置密码，取消无需密码登录</strong></li></ol><p><em>别忘了分号</em></p><pre class="line-numbers language-none"><code class="language-none">use mysql;flush privileges;UPDATE user SET authentication_string&#x3D;&quot;&quot; WHERE user&#x3D;&quot;root&quot;;&#x2F;&#x2F;先把root密码置为空flush privileges;alter user &#39;root&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;你的密码&#39;; &#x2F;&#x2F; 重置密码exit; &#x2F;&#x2F; 退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再去掉之前加的skip-grant-tables</p><pre class="line-numbers language-none"><code class="language-none">sudo vim &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启mysql</p><pre class="line-numbers language-none"><code class="language-none">service mysql restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><strong>配置用户以及数据库</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入重置后的密码</p><pre class="line-numbers language-none"><code class="language-none">create database snort;create database archive;&#x2F;&#x2F; 创建snort 和 archive数据库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">create user snort@localhost; &#x2F;&#x2F; 创建snort用户grant usage on snort.* to snort@localhost; &#x2F;&#x2F; 授予权限，只能从本地连接服务器grant usage on archive.* to snort@localhost;&#x2F;&#x2F; 同上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">set password for snort@localhost&#x3D;PASSWORD(&#39;密码&#39;); &#x2F;&#x2F; 设置密码，这个密码要记住，以后要用<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">grant all privileges on snort.* to snort@localhost; &#x2F;&#x2F; 授予对数据库的所有操作grant all privileges on archive.* to snort@localhost;&#x2F;&#x2F; 如插入、删除等等..flush privileges;exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装barnyard2"><a href="#安装barnyard2" class="headerlink" title="安装barnyard2"></a>安装barnyard2</h2><ol><li><strong>首先安装一些依赖项</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install build-essential libpcap-dev libmysqlclient-dev libtool libssl-dev libnetfilter queue-dev libpcre3-dev autoconf automake bison flex libdumbnet-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行失败也没关系，之后缺什么按什么即可</p><ol start="2"><li><strong>安装barnyard2</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">cd ~wget https:&#x2F;&#x2F;github.com&#x2F;firnsy&#x2F;barnyard2&#x2F;archive&#x2F;v2- 1.13.tar.gz -O barnyard2-2-1.13.tar.gztar zxvf barnyard2-2-1.13.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">cd barnyard2-2-1.13autoreconf -fvi -I .&#x2F;m4.&#x2F;configure --with-mysql --with-mysql libraries&#x3D;&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu --with-mysql-includes&#x3D;&#x2F;usr&#x2F;include&#x2F;makesudo make installsudo cp &#x2F;usr&#x2F;local&#x2F;etc&#x2F;barnyard2.conf &#x2F;etc&#x2F;snortsudo mkdir &#x2F;var&#x2F;log&#x2F;barnyard2touch &#x2F;var&#x2F;log&#x2F;snort&#x2F;barnyard2.waldosudo chown snort.snort &#x2F;var&#x2F;log&#x2F;barnyard2sudo cp schemas&#x2F;create_mysql &#x2F;usr&#x2F;src   &#x2F;&#x2F;这个之后要用，在barnyard2-2-1.13目录下，我一开始没找到。。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>编辑配置</strong></li></ol><p>44行附近，修改为：</p><pre class="line-numbers language-none"><code class="language-none">config logdir:&#x2F;var&#x2F;log&#x2F;barnyard2 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>56行附近，修改为：</p><pre class="line-numbers language-none"><code class="language-none">config hostname: localhostconfig interface: ens33 &#x2F;&#x2F;是不是感觉似曾相识<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>131行附近，修改为：</p><pre class="line-numbers language-none"><code class="language-none">config waldo_file:&#x2F;var&#x2F;log&#x2F;snort&#x2F;barnyard2.waldo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>227行附近，修改为：</p><pre class="line-numbers language-none"><code class="language-none">output alert_fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>348行附近，去掉注释，修改为：</p><pre class="line-numbers language-none"><code class="language-none">output database: log, mysql, user&#x3D;snort password&#x3D;123456 dbname&#x3D;snort host&#x3D;localhost  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：这里的user和password填刚刚在数据库创建的用户及其密码</strong></p><p>还记得之前说过<code>sudo cp schemas/create_mysql /usr/src</code>之后要用吗，就是现在要用一下，这是一个建表的脚本。</p><pre class="line-numbers language-none"><code class="language-none">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入密码登录数据库</p><pre class="line-numbers language-none"><code class="language-none">use snort;source &#x2F;usr&#x2F;src&#x2F;create_mysql;show tables;                                                 exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果应该是这样的：</p><p><img src="/2023/05/09/ubuntu-snort-barnyard2-base/create.png"></p><h2 id="测试barnyard2"><a href="#测试barnyard2" class="headerlink" title="测试barnyard2"></a>测试barnyard2</h2><p>接下来我们来测试一下刚刚安装的barnyard2</p><ol><li><strong>启动snort</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">sudo snort -q -u snort -g snort -c &#x2F;etc&#x2F;snort&#x2F;snort.conf -i ens33 -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出应为：</p><p><img src="/2023/05/09/ubuntu-snort-barnyard2-base/b-test-1.png"></p><ol start="2"><li><strong>启动Barnyard2</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">sudo barnyard2 -c &#x2F;etc&#x2F;snort&#x2F;barnyard2.conf -d &#x2F;var&#x2F;log&#x2F;snort&#x2F; -f snort.log -w &#x2F;var&#x2F;log&#x2F;snort&#x2F;barnyard2.waldo -g snort -u snort -T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我在这里遇到了数据库连接失败的情况，我检查了一下用户名和密码无误后，再次尝试还是失败，于是我选择重启电脑，问题果然被解决了。。。</p><p>然后我又遇到了缺少sid-msg.map文件的错误，修复方法：</p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;share&#x2F;oinkmastersudo bash -c &quot;sudo .&#x2F;create-sidmap.pl &#x2F;etc&#x2F;snort&#x2F;rules &gt; &#x2F;etc&#x2F;snort&#x2F;sid-msg.map&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最终的输出结果应该是这样的：</p><p><img src="/2023/05/09/ubuntu-snort-barnyard2-base/b-test-2.png"></p><p><code>barnyard2</code>: 启动Barnyard2程序</p><p><code>-c /etc/snort/barnyard2.conf</code>: 指定Barnyard2的配置文件路径为“&#x2F;etc&#x2F;snort&#x2F;barnyard2.conf“</p><p><code>-d /var/log/snort/</code>: 指定Snort日志文件的目录路径为“&#x2F;var&#x2F;log&#x2F;snort&#x2F;”</p><p><code>-f snort.log</code>: 指定要处理的日志文件名称为“snort.log”</p><p><code>-w /var/log/snort/barnyard2.waldo</code>: 指定Barnyard2的Waldo文件路径为“&#x2F;var&#x2F;log&#x2F;snort&#x2F;barnyard2.waldo”</p><p><code>-g snort</code>: 指定Barnyard2运行的用户组为“snort”</p><p><code>-u snort</code>: 指定Barnyard2运行的用户为“snort”</p><p><code>-T</code>: 检查Barnyard2配置文件的正确性，并输出任何错误或警告信息</p><ol start="3"><li><strong>继续测试</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">sudo barnyard2 -c &#x2F;etc&#x2F;snort&#x2F;barnyard2.conf -d &#x2F;var&#x2F;log&#x2F;snort -f snort.log –w &#x2F;var&#x2F;log&#x2F;snort&#x2F;barnyard2.waldo -g snort -u snort<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>继续ping测试，方法参考之前的。</p><p>然后检查数据库是否存入数据</p><pre class="line-numbers language-none"><code class="language-none">mysql -u snort -p -D snort -e &quot;select count(*) from event&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/05/09/ubuntu-snort-barnyard2-base/b-test-3.png"></p><p>count不是0就行~</p><p>恭喜哦</p><h2 id="安装BASE"><a href="#安装BASE" class="headerlink" title="安装BASE"></a>安装BASE</h2><ol><li><strong>各种安装</strong></li></ol><p><strong>安装相关插件</strong></p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install libphp-adodb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>修改php.ini:</strong></p><pre class="line-numbers language-none"><code class="language-none">sudo vi &#x2F;etc&#x2F;php&#x2F;5.6&#x2F;apache2&#x2F;php.ini <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在449行附件，改为：</p><pre class="line-numbers language-none"><code class="language-none">error_reporting &#x3D; E_ALL &amp; ~E_NOTICE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个要改对哦，我一开始没改对，找了好久。。。</p><p><strong>修改apache2.conf:</strong></p><pre class="line-numbers language-none"><code class="language-none">sudo vim &#x2F;etc&#x2F;apache2&#x2F;apache2.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加入以下内容：（178行左右）</p><pre class="line-numbers language-none"><code class="language-none">&lt;Directory &#x2F;var&#x2F;www&#x2F;html&#x2F;base&gt;    AllowOverride All    Require all granted&lt;&#x2F;Directory&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重启Apache2：</strong></p><pre class="line-numbers language-none"><code class="language-none">sudo service apache2 restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>安装BASE依赖：</strong></p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install php-pearsudo apt-get install libwww-perl                                                       sudo apt-get install php5.6-gdsudo apt-get install php5.6-xmlsudo pear config-set preferred_state alphasudo pear channel-update pear.php.netsudo pear install --alldeps Image_Color Image_Canvas Image_Graph<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后一个安装可能会有些久，请耐心等待~~</p><ol start="2"><li><strong>安装BASE</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">sudo wget http:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;secureideas&#x2F;files&#x2F;BASE&#x2F;base-1.4.5&#x2F;base-1.4.5.tar.gzsudo tar -zxf base-1.4.5.tar.gzsudo cp -r base-1.4.5 &#x2F;var&#x2F;www&#x2F;html&#x2F;basesudo chown -R www-data:www-data &#x2F;var&#x2F;www&#x2F;html&#x2F;basesudo service apache2 restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>打开BASE</strong></li></ol><p>在浏览器输入<code>localhost/base</code>，应该是这样的：</p><p><img src="/2023/05/09/ubuntu-snort-barnyard2-base/web1.png"></p><p>点continue~~进入下一步 </p><ol start="4"><li><strong>配置BASE</strong></li></ol><p>照着写：</p><p><img src="/2023/05/09/ubuntu-snort-barnyard2-base/web2.png"></p><p>这里需要写数据库的用户名和密码：</p><p><img src="/2023/05/09/ubuntu-snort-barnyard2-base/web3.png"></p><p>设置管理员用户名和密码，Full name可以不写：</p><p><img src="/2023/05/09/ubuntu-snort-barnyard2-base/web4.png"></p><p>然后进入第四步，直接点进入到第五步，应该是这样：</p><p><img src="/2023/05/09/ubuntu-snort-barnyard2-base/web6.png"></p><p>最终：</p><p><img src="/2023/05/09/ubuntu-snort-barnyard2-base/web5.png"></p><p><strong>成功辣！！！！</strong></p><p>我前前后后其实配了很久，踩了很多的坑，遇到了各种各样的问题，不过一切问题都是有原因的，总有办法可以解决问题。</p><h2 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h2><p>配完环境之后，需要重新启动一下计算机。</p><p><strong>启动服务：</strong></p><pre class="line-numbers language-none"><code class="language-none">sudo &#x2F;etc&#x2F;init.d&#x2F;mysql startsudo &#x2F;etc&#x2F;init.d&#x2F;apache2 startsudo &#x2F;etc&#x2F;init.d&#x2F;snort startsudo snort -u snort -g snort -c &#x2F;etc&#x2F;snort&#x2F;snort.conf -i ens33 -Dsudo barnyard2 -c &#x2F;etc&#x2F;snort&#x2F;barnyard2.conf -d &#x2F;var&#x2F;log&#x2F;snort&#x2F; -f snort.log -w &#x2F;var&#x2F;log&#x2F;snort&#x2F;barnyard2.waldo -g snort -u snort<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ping：</strong></p><p>方法参考前文</p><p><strong>查看警告：</strong></p><p>在浏览器输入<code>localhost/base</code> ，即可查看结果：</p><p><img src="/2023/05/09/ubuntu-snort-barnyard2-base/result.png"></p><p>可以看到有新增的警告，还可以查看<code>Today‘s alert</code>了解详细信息：</p><p><img src="/2023/05/09/ubuntu-snort-barnyard2-base/today.png"></p><p><strong>谢谢！</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> snort </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to git</title>
      <link href="/2023/05/05/how-to-git/"/>
      <url>/2023/05/05/how-to-git/</url>
      
        <content type="html"><![CDATA[<h1 id="记录一下在使用git时遇到的异常，以便后续查阅"><a href="#记录一下在使用git时遇到的异常，以便后续查阅" class="headerlink" title="记录一下在使用git时遇到的异常，以便后续查阅"></a>记录一下在使用git时遇到的异常，以便后续查阅</h1><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><h5 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h5><pre class="line-numbers language-none"><code class="language-none">git initgit remote add origin git@github.com:Natt1e&#x2F;learnGit.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="删除关联的远程仓库"><a href="#删除关联的远程仓库" class="headerlink" title="删除关联的远程仓库"></a>删除关联的远程仓库</h5><pre class="line-numbers language-none"><code class="language-none">git remote rm origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h5><pre class="line-numbers language-none"><code class="language-none">git branch -d &lt;branch-name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果该分支有未合并的更改，此指令会报错，若想强制删除分支，使用：</p><pre class="line-numbers language-none"><code class="language-none">git branch -D &lt;branch-name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h5><pre class="line-numbers language-none"><code class="language-none">git push origin --delete &lt;branch-name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h5><pre class="line-numbers language-none"><code class="language-none">git checkout &lt;branch-name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="创建并切换到新分支-b"><a href="#创建并切换到新分支-b" class="headerlink" title="创建并切换到新分支 -b"></a>创建并切换到新分支 -b</h5><pre class="line-numbers language-none"><code class="language-none">git checkout -b &lt;branch-name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="报错一"><a href="#报错一" class="headerlink" title="报错一"></a>报错一</h3><pre class="line-numbers language-none"><code class="language-none">fatal:refusing to merge unrelated histories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我在远端创建了一个新的空仓库，想把本地的仓库push上去。在执行到<code>git push orgin master</code>时，报错：</p><pre class="line-numbers language-none"><code class="language-none">! [rejected]        master -&gt; master (non-fast-forward)error: failed to push some refs to &#39;github.com:Natt1e&#x2F;xxxx.git&#39;hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Integrate the remote changes (e.g.hint: &#39;git pull ...&#39;) before pushing again.hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>git提示我要<code>git pull</code>一下，我就乖乖照做了，但在使用<code>git pull origin master</code>时遇到了此报错，原因是两个仓库不同而导致的。</p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><pre class="line-numbers language-none"><code class="language-none">git pull origin master --allow-unrelated-histories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use Hexo and github to create your blog</title>
      <link href="/2022/07/27/first/"/>
      <url>/2022/07/27/first/</url>
      
        <content type="html"><![CDATA[<h1 id="如何利用Hexo-Github搭建博客"><a href="#如何利用Hexo-Github搭建博客" class="headerlink" title="如何利用Hexo+Github搭建博客"></a>如何利用Hexo+Github搭建博客</h1><p>在网上(如某乎)有着诸多教学的帖子。大致的流程如下：</p><ul><li>安装Node.js</li><li>安装Git</li><li>注册Github账号(包括连接Github与本地)</li><li>安装Hexo</li><li>具体操作</li></ul><p>网上的教程写的都很详细，我也不在此赘述，仅在此分享一些我在搭建过程中遇到的问题以及解决方案。</p><h1 id="问题以及解决方案"><a href="#问题以及解决方案" class="headerlink" title="问题以及解决方案"></a>问题以及解决方案</h1><h4 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h4><p>在教程中生成SSH的方法是：</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;youremail&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后会说接下来一路按回车就可以。</p><p>但这会存在一些问题，比如你有多个Github账号，或已经生成过SSH，如何再生成一个呢？（保证之前生成的不会被覆盖）</p><p>在输入上述指令后，小黑窗会出现：</p><pre class="line-numbers language-none"><code class="language-none">Generating public&#x2F;private rsa key pair.Enter file in which to save the key(&#x2F;c&#x2F;Users&#x2F;**&#x2F;id_rsa)此处括号内是.ssh的路径:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果在此处按回车，生成的密钥就会默认命名为id_rsa 和 id_rsa.pub</p><p>如果我们想生成多个，可以在冒号后面输入新的名字，如github_id_rsa</p><p>之后一直按回车就可以了。</p><p>在测试是否连接成功时，教程一般会让你输入如下指令：</p><pre class="line-numbers language-none"><code class="language-none">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果出现了教程中的成功画面，那就皆大欢喜，但有可能像我一样出现如下代码：</p><pre class="line-numbers language-none"><code class="language-none">The authenticity of host &#39;github.com()&#39; can&#39;t be established.略略Are you sure you want to continue connecting(yes&#x2F;no&#x2F;[fingerprint])?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们先输入yes</p><p>然后再次尝试：</p><pre class="line-numbers language-none"><code class="language-none">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时有可能会出现：</p><pre class="line-numbers language-none"><code class="language-none">git@github.com:Permission denied(publickey)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>妈的！怎么告诉我没有权限</p><p>此时为了解决这个问题，我们继续在小黑窗输入以下代码：</p><pre class="line-numbers language-none"><code class="language-none">ssh-agent bashssh-add ~&#x2F;.ssh&#x2F;your_id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>.ssh&#x2F;后输入刚刚生成的文件的名字，如果是默认命名则为id_rsa</p><p>此时再执行那该死的</p><pre class="line-numbers language-none"><code class="language-none">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以显示出成功的界面啦~</p><h5 id="安装Node-js和Hexo"><a href="#安装Node-js和Hexo" class="headerlink" title="安装Node.js和Hexo"></a>安装Node.js和Hexo</h5><p>安装完Node.js后，教程会让你输入<code>node -v</code> 和 <code>npm -v</code>来检查版本以查看是否安装成功</p><p>执行<code>node -v</code>时还好，只出现了版本号</p><p>但在执行<code>npm -v</code>时，又出现了奇怪的东西 ：</p><pre class="line-numbers language-none"><code class="language-none">npm warn config global &#39;--global&#39;,&#39;--local&#39; are deprecated.use &#39;--location&#x3D;global&#39; instead.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当我执行到这时我只想骂街，怎么出这么多状况</p><p>为了让这个玩意消失，我在网上查了两种方法：</p><ul><li>方法一</li></ul><p>1.打开node.js的安装目录，找到npm.cmd文件</p><p>2.右键—-属性—-安全—–设置为完全可控</p><p>3.编辑：将后缀改成txt，将其中的prefix -g 改为prefix –location&#x3D;global，再改回cmd后缀，如果不执行第二步，此处会不让你修改</p><p>4.保存</p><p>经过一系列操作，我们再输入<code>npm -v</code>，就没有那行warn出现了！</p><p>但在教程后续操作中，可能还会出现，忽略即可</p><ul><li>方法二（未尝试）</li></ul><p>1.cmd小黑窗执行命令</p><pre class="line-numbers language-none"><code class="language-none">npm install -g npm-windows-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.下载Windows Power Shell，以管理员身份运行，执行命令：</p><pre class="line-numbers language-none"><code class="language-none">set-ExecutionPolicy RemoteSigned<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后输入Y</p><p>3.在Windows Power Shell执行：</p><pre class="line-numbers language-none"><code class="language-none">npm-windows-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to write my article and post it</title>
      <link href="/2022/07/27/hello-world/"/>
      <url>/2022/07/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new post <span class="token string">"title"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行后在根目录<code>\source\_posts</code>下即可发现多了一个.md文章。</p><h3 id="生成静态网页"><a href="#生成静态网页" class="headerlink" title="生成静态网页"></a>生成静态网页</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="本地预览效果"><a href="#本地预览效果" class="headerlink" title="本地预览效果"></a>本地预览效果</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="上传至github"><a href="#上传至github" class="headerlink" title="上传至github"></a>上传至github</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传后更新会有延迟，耐心等待即可~</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
